#!/usr/bin/env python3

SAMPLES         = ['ATACrep3', 'ATACrep4']
READ_PAIRS      = ['R1', 'R2']
RAW_READS_PATHS = expand('data/{sample}_{read}.fastq.gz', sample=SAMPLES, read=READ_PAIRS)
SAMPLE_NAME     = expand('{sample}_{read_pair}', sample=SAMPLES, read_pair=READ_PAIRS)
TRIM_OUT        = ['r1p', 'r1u', 'r2p', 'r2u']


### Function for generating list of files for rule all
def get_final_output():
    final_list = []

    ### FASTQC OUTPUT
    final_list.append(expand('results/qc/fastqc/{sample}_fastqc.{ext}',
        sample=SAMPLE_NAME,
        ext=['html', 'zip']))


    ### TRIMMOMATIC OUTPUT not needed
    #final_list.append(expand('results/raw_reads_trimmed/{sample}_{trim_out}.fastq.gz', 
    #    sample=SAMPLES,
    #    trim_out=TRIM_OUT))

    ### BOWTIE2 BUILD not needed
    #final_list.append('logs/bowtie2_build.done')
    
    ### BOWTIE2 ALIGNMENT OUTPUTS (requires trimmomatic output) not needed
    #final_list.append(expand('results/bowtie2_alignments/{sample}.bam',
    #    sample=SAMPLES))

    ### SAMTOOLS FLAGSTAT not needed
    #final_list.append(expand('results/qc/flagstats/{sample}.stats',
    #    sample=SAMPLES))

    ### MultiQC Output (requires part of fastqc and all of samtools flagstat output)
    final_list.append('results/qc/multiqc_report.html')

    ### Samtools noMT Output
    #final_list.append(expand('results/samtools/{sample}_noMT.bam',
    #    sample=SAMPLES))

    ### Samtools Index output
    #final_list.append(expand('results/samtools/{sample}_noMT_sorted.bam.bai',
    #    sample=SAMPLES))

    ### DeepTools alignmentSieve
    #final_list.append(expand('results/deeptools/{sample}_sieved.bam',
    #    sample=SAMPLES))

    ###
    #final_list.append(expand('results/deeptools/{sample}_sieved_sorted.bam.bai',
    #    sample=SAMPLES))

    ### ATACseqQC output
    final_list.append(expand('results/{sample}.fragment.size.distribution.pdf',
        sample=SAMPLES))

    ### MACS3 hmmratac Output
    #final_list.append(expand('logs/macs3_{sample}.done',
    #    sample=SAMPLES))

    ### MACS3 callpeaks output
    #final_list.append(expand('results/macs3/{sample}_peaks.narrowPeak',
    #    sample=SAMPLES))

    ### Bedtools Intersect output
    #final_list.append('results/bedtools/ATACpeaks.bed')

    ### Bedtools filter blacklist output
    #final_list.append('results/bedtools/ATACpeaks_noBlacklist.bed')

    ### Homer annotated peaks output
    #final_list.append('results/homer/ATACpeaks_noBlacklist_annotated.bed')

    ### Homer find motifs output
    final_list.append('logs/homer_motifs.done')

    return final_list



### Function for generating list of qc reports to concatenate
#   with MultiQC
def get_qc_reports():
    qc_reports = []

    ### FastQC reports
    qc_reports.append(expand('results/qc/fastqc/{sample}_fastqc.zip',
        sample=SAMPLE_NAME))

    ### Samtools Flagstat reports
    qc_reports.append(expand('results/qc/flagstats/{sample}.stats',
        sample=SAMPLES))
        
    return qc_reports


def get_replicates():
    return SAMPLES
