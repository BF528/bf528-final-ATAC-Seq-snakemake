#!/usr/bin/env python3

SAMPLES         = ['ATACrep3', 'ATACrep4']
READ_PAIRS      = ['R1', 'R2']
RAW_READS_PATHS = expand('data/{sample}_{read}.fastq.gz', sample=SAMPLES, read=READ_PAIRS)
SAMPLE_NAME     = expand('{sample}_{read_pair}', sample=SAMPLES, read_pair=READ_PAIRS)



### Function for generating list of files for rule all
def get_final_output():
    final_list = []

    ### FASTQC OUTPUT
    final_list.append(expand('results/qc/fastqc/{sample}_fastqc.{ext}',
        sample=SAMPLE_NAME,
        ext=['html', 'zip']))


    ### TRIMMOMATIC OUTPUT
    #final_list.append(expand('results/raw_reads_trimmed/{sample}_trimmed.fastq.gz', 
    #    sample=SAMPLE_NAME))


    ### BOWTIE2 BUILD
    #final_list.append('logs/bowtie2_build.done')
    

    ### BOWTIE2 ALIGNMENT OUTPUTS (requires trimmomatic output)
    final_list.append(expand('results/bowtie2_alignments/{sample}.bam',
        sample=SAMPLE_NAME))
    

    ### SAMTOOLS FLAGSTAT
    final_list.append(expand('results/qc/flagstats/{sample}.stats',
        sample=SAMPLE_NAME))




    return final_list



### Function for generating list of qc reports to concatenate
#   with MultiQC
def get_qc_reports():
    qc_reports = []

    ### FastQC reports
    qc_reports.append(expand('results/qc/fastqc/{sample}_fastqc.zip',
        sample=SAMPLE_NAME))

    ### Samtools Flagstat reports
    qc_reports.append(expand('results/qc/flagstats/{sample}.stats',
        sample=SAMPLE_NAME))
        
    return qc_reports
